#include<iostream>
#include<stdio.h>
using namespace std;
class node
{
    public:
    int data;
    node *next;
};
class linked
{
    private:
     node *first;
    public:
        linked()
        {
            first=NULL;
            
        }
        linked(int arr[],int size);
        void dis();
        int count();
        int sum();
        int max();
        void lsearch(int key);
        void trans(int key);
        void insert(int index,int key);
        void sorted(int element);
        void del(int index);
        int sortedornot();
        void reverse();
};
linked::linked(int arr[],int size)
{
    node *temp,*last;
    first=new node;
    first->data=arr[0];
    first->next=NULL;
    last=first;
    for(int i=1;i<size;i++)
    {
        temp=new node;
        temp->data=arr[i];
        temp->next=NULL;
        last->next=temp;
        last=temp;
    }
}
void linked::dis()
{
    node *p=first;
    while(p!=NULL)
    {
        cout<<p->data;
        p=p->next;
    }
    
}
int linked::count()
{
    int count=0;
    node *p=first;
    while(p!=NULL)
    {
        count++;
        p=p->next;
    }
    return count;
}
int linked::sum()
{
    int sum=0;
    node *p=first;
    while(p!=NULL)
    {
        sum=sum+p->data;
        p=p->next;
    }
    return sum;
}
int linked::max()
{
    node *p=first;
    int max=0;
    while(p!=NULL)
    {
        if(p->data>max)
        {
            max=p->data;
            p=p->next;
        }
        
    }
    return max;
}    
void linked::lsearch(int key)
{
    node *p=first;
    while(p!=NULL)
    {
        if(p->data==key)
        {
            cout<<"found";
        }
        p=p->next;
    }
   
}
void linked::trans(int key) // moving the found node to the first//tail pointer;
{
    node *p=first;
    node *q=NULL;
    while(p!=NULL)
    {
        if(key==p->data)
        {
            q->next=p->next;
            
            p->next=first;
            first=p;
            cout<<"found"<<endl;
        }
        q=p;
        p=p->next;
    }
}
void linked::insert(int index,int x)
{
 node *t,*p=first;


 t=new node;
 t->data=x;
 t->next=NULL;

 if(index==0)
 {
 t->next=first;
 first=t;
 }
 else
 {
 for(int i=0;i<index-1;i++)
 p=p->next;
 
 }
 t->next=p->next;
 p->next=t;
}
void linked::sorted(int element)
{
    node *p=first;
    node *q=NULL;
    node *t=new node;
   
    while(p && p->data<element)
    {
           

        q=p;
        p=p->next;
    }
     t->data=element;
        t->next=q->next;
        q->next=t;
}
void linked::del(int index)
{
    node *p=first;
    node *q=NULL;
    if(index==1)
    {
        first=first->next;
        int x=p->data;
        delete p;
        cout<<x;
    }
    else
    { 
        for(int i=0;i<index-1 && p;i++)
        {
            q=p;
            p=p->next;
        }
        q->next=p->next;
        int y=p->data;
        delete p;
        cout<<y;
        
    }
}
int linked::sortedornot()
{
    node *p=first;
   int x=0;
    while(p!=NULL)
    {
        if(p->data<x)
        
            return 0;
           
        x=p->data;
        p=p->next;
            
        
    }
    return 1;
}
void linked::reverse()
{
    node *p=first;
    int *arr=new int[count()];
    int i=0;
    while(p!=NULL)
    {
        arr[i]=p->data;
        i++;
        p=p->next;
        
    }
    p=first;
    i--;
    while(p!=NULL)
    {
        p->data=arr[i--];
        p=p->next;
    }
    
}
void linked::concat()
{
    node *p=first;
    while(p!=NULL)
    {
        p=p->next;
        
    }
    p->next=second;
    second=p;
    second=NULL;
}

int main()
{
    int arr[]={1,2,3,4,5,6};
    linked l(arr,6);
    l.dis();
    cout<<endl;
    l.reverse();
    l.dis();
    
   
}

