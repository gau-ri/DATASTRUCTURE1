#include<iostream>
#include<stdio.h>
using namespace std;
class node
{
    public:
    int data;
    node *next;
};
class linked
{
    public:
     node *first;
    public:
        linked()
        {
            first=NULL;
            
        }
        linked(int arr[],int size);
        ~linked()
        {
            delete first;
        }
        void dis();
        int count();
        int sum();
        int max();
        void lsearch(int key);
        void trans(int key);
        void insert(int index,int key);
        void sorted(int element);
        void del(int index);
        int sortedornot();
        void reverse();
        void getnth(int n);
        void getnthfromend(int n);
        void printmiddle();
        void searchfor(int n);
        void ifpalindrome(int size);
        void movefirst();
};
linked::linked(int arr[],int size)
{
    node *temp,*last;
    first=new node;
    first->data=arr[0];
    first->next=NULL;
    last=first;
    for(int i=1;i<size;i++)
    {
        temp=new node;
        temp->data=arr[i];
        temp->next=NULL;
        last->next=temp;
        last=temp;
    }
}
void linked::dis()
{
    node *p=first;
    while(p!=NULL)
    {
        cout<<p->data;
        p=p->next;
    }
    
}
int linked::count()
{
    int count=0;
    node *p=first;
    while(p!=NULL)
    {
        count++;
        p=p->next;
    }
    return count;
}
int linked::sum()
{
    int sum=0;
    node *p=first;
    while(p!=NULL)
    {
        sum=sum+p->data;
        p=p->next;
    }
    return sum;
}
int linked::max()
{
    node *p=first;
    int max=0;
    while(p!=NULL)
    {
        if(p->data>max)
        {
            max=p->data;
            p=p->next;
        }
        
    }
    return max;
}    
void linked::lsearch(int key)
{
    node *p=first;
    while(p!=NULL)
    {
        if(p->data==key)
        {
            cout<<"found";
        }
        p=p->next;
    }
   
}
void linked::trans(int key) // moving the found node to the first//tail pointer;
{
    node *p=first;
    node *q=NULL;
    while(p!=NULL)
    {
        if(key==p->data)
        {
            q->next=p->next;
            
            p->next=first;
            first=p;
            cout<<"found"<<endl;
        }
        q=p;
        p=p->next;
    }
}
void linked::insert(int index,int x)
{
 node *t,*p=first;


 t=new node;
 t->data=x;
 t->next=NULL;

 if(index==0)
 {
 t->next=first;
 first=t;
 }
 else
 {
 for(int i=0;i<index-1;i++)
 p=p->next;
 
 }
 t->next=p->next;
 p->next=t;
}
void linked::sorted(int element)
{
    node *p=first;
    node *q=NULL;
    node *t=new node;
   
    while(p && p->data<element)
    {
           

        q=p;
        p=p->next;
    }
     t->data=element;
        t->next=q->next;
        q->next=t;
}
void linked::del(int index)
{
    node *p=first;
    node *q=NULL;
    if(index==1)
    {
        first=first->next;
        int x=p->data;
        delete p;
        cout<<x;
    }
    else
    { 
        for(int i=0;i<index-1 && p;i++)
        {
            q=p;
            p=p->next;
        }
        q->next=p->next;
        int y=p->data;
        delete p;
        cout<<y;
        
    }
}
int linked::sortedornot()
{
    node *p=first;
   int x=0;
    while(p!=NULL)
    {
        if(p->data<x)
        
            return 0;
           
        x=p->data;
        p=p->next;
            
        
    }
    return 1;
}
void linked::reverse()
{
    node *p=first;
    int *arr=new int[count()];
    int i=0;
    while(p!=NULL)
    {
        arr[i]=p->data;
        i++;
        p=p->next;
        
    }
    p=first;
    i--;
    while(p!=NULL)
    {
        p->data=arr[i--];
        p=p->next;
    }
    
}
/*void linked::concat()
{
    node *p=first;
    while(p!=NULL)
    {
        p=p->next;
        
    }
    p->next=second;
    second=p;
    second=NULL;
}*/
void linked::getnth(int n)
{
    node *p=first;
    int count=0;
    while(p!=NULL)
    {
        if(count==n)
        
            cout<<p->data;
    
        count++;
        p=p->next;
        
    }
    
}
/*void linked::getnthfromend(int n)
{
    int count=0;
    node *p=first;
    while(p!=NULL)
    {
       count++;
        p=p->next;
         
    }
   
    for(int i=1;i<count-n+1;i++)
    {
        p=p->next;
        cout<<p->data;
        return ;
    }
}
void linked::printmiddle()
{
    int count=0;
    node *p=first;
    while(p!=NULL)
    {
        count++;
        p=p->next;
    }
    for(int i=0;i<count/2;i++)
    {
        p=p->next;
        cout<<p->data;
    }
}*/
void linked::searchfor(int n)
{
     int count;
    node *p=first;
	while(p)
	{
		if(p->data==n)
			count++;
		p=p->next;
		
	}
	cout<<count;
}
void linked::ifpalindrome(int size)
{
    node *p=first;
    int *arr=new int[size];
    int i=0;
    while(p!=NULL)
    {
        arr[i]=p->data;
        i++;
        p=p->next;
        
    }
    p=first;
    i--;
    while(p!=NULL)
    {
        p->data=arr[i--];
        p=p->next;
    }
    i=0;
    while(p!=NULL)
    {
    	for(int j=0;j<size;j++)
    	{
    		if(p->data==arr[j])
    		{
    			cout<<"it is palindrome";
			}
			else
			{
				cout<<"its not a palindrome";
			}
		}
	}
    
}
void linked::movefirst()
{
	node *p=first;
	node *q=NULL;
	if(p)
		return;
	else
	{
		while(p!=NULL)
		{
			q=p;
			p=p->next;
		}
		q->next=NULL;
		p->next=first;
		first=p;
	}
}
int main()
{
    int arr[]={1,2,2,4,5,6};
    linked l(arr,6);
    l.dis();
    cout<<endl;
    l.reverse();
    l.dis();
    cout<<endl;
    
    cout<<"nth node from starting";
	l.getnth(1);
    
    //l.getnthfromend(2);
   // l.printmiddle();
    cout<<endl;
   cout<<"the digit 2 is getting repeated ";
   l.searchfor(2);
   cout<<"Times";
   l.ifpalindrome(6);

   cout<<endl;
   cout<<"original: ";
   l.dis();
   cout<<"swapped: ";
    l.movefirst();
   l.dis();
}

