#include<iostream>
using namespace std;
class stack
{
	public:
	int top;
	int *arr;
	int size;
	stack(int size);
	~stack();
	void display();
	void push(int x);
	void pop();
//	int top();
	void overflow();
	void underflow();
	void peek(int pos);
};
stack::stack(int size)
{
    this->size=size;
	top=-1;
	arr=new int[size];
	
}
stack::~stack()
{
	delete []arr;
}
void stack::push(int x)
{
	if(top==size-1)
	{
		cout<<"overflow";
	}
	else
	{
		top++;
		arr[top]=x;
	}
}
void stack::display()
{
	for(int i=0;i<size;i++)
	{
		cout<<arr[i]<<endl;
	}
}
void stack:: pop()
{
	int x=-1;
	if(top==-1)
	{
	cout<<"-1";
	}
	else
	{
		x=arr[top];
		top--;
	}
	cout<<x;
}
void stack::overflow()
{
	if(top==size-1)
	{
		cout<<"full";
	}
	else
	{
		cout<<"not full";
	}
}
void stack::underflow()
{
	if(top==-1)
	{
		cout<<"empty";
	}
	else
	{
		cout<<"not empty";
	}
}
void stack:: peek(int pos)
{
	int x=0;
	if(pos>0 && pos<size-1)
	{
		x=arr[top-pos+1];
	}
	    cout<<x;
}

int main()
{
	stack s(5);
	s.push(1);
		s.push(2);
			s.push(3);
				s.push(4);
				s.push(5);
				s.display();
				s.peek(2);
				cout<<endl;
				s.peek(0);
				s.pop();
				cout<<endl;
				s.pop();
				cout<<endl;
				s.overflow();
				cout<<endl;
				s.pop();
				s.pop();
				s.pop();
				s.pop();
				s.pop();
				s.pop();
				s.underflow();
				
			
}
